{
	"info": {
		"_postman_id": "d8e9788b-fbe6-4b9f-b4cf-c48efe3d4704",
		"name": "TestAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Get all posts of the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userNo}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userNo}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post new post for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"// if id is greater than 100, the operation is not really completed \r",
									"const response = pm.response.json();\r",
									"//console.log(response); debug \r",
									"\r",
									"pm.test(\"Id should be ok\", ()  => {\r",
									"//pm.expect(response.id).to.eql(101);\r",
									"//pm.expect(response.id).to.not.eql(101);\r",
									"pm.expect(response.id).to.not.gt(100);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(response).to.be.an(\"object\");\r",
									"  pm.expect(response.userId).to.be.a(\"integer\");\r",
									"  pm.expect(response.id).to.be.a(\"number\");\r",
									"  pm.expect(response.title).to.be.a(\"string\");\r",
									"  pm.expect(response.body).to.be.an(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"userId\": {{userNo}},\r\n        \"id\": {{postNo}},\r\n        \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\r\n        \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userNo}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userNo}}",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all to do  of the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userNo}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userNo}}",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post new to do  for the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// if id is greater than 10, the operation is not really completed \r",
									"const response = pm.response.json();\r",
									"pm.test(\"ID should be <= 200\", ()  => {\r",
									"pm.expect(response.id).to.not.gt(200);\r",
									"});\r",
									"//console.log(response);\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(response).to.be.an(\"object\");\r",
									"  pm.expect(response.userId).to.be.a(\"integer\");\r",
									"  pm.expect(response.id).to.be.a(\"number\");\r",
									"  pm.expect(response.title).to.be.a(\"string\");\r",
									"  pm.expect(response.completed).to.be.a(\"boolean\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"userId\": {{userNo}},\r\n        \"id\": {{postNo}},\r\n        \"title\": \"delectus aut autem1\",\r\n        \"completed\": true\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userNo}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userNo}}",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all albums of the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userNo}}/albums",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userNo}}",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post new  album of the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// if id is greater than 100, the operation is not really completed \r",
									"const response = pm.response.json();\r",
									"//console.log(response); \r",
									"\r",
									"pm.test(\"Id be ok\", ()  => {\r",
									"//pm.expect(response.id).to.eql(101);\r",
									"//pm.expect(response.id).to.not.eql(101);\r",
									"pm.expect(response.id).to.not.gt(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(response).to.be.an(\"object\");\r",
									"  pm.expect(response.userId).to.be.a(\"integer\");\r",
									"  pm.expect(response.id).to.be.a(\"number\");\r",
									"  pm.expect(response.title).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"userId\": {{userNo}},\r\n        \"id\": 1,\r\n        \"title\": \"quidem molestiae enim\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userNo}}/albums",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userNo}}",
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{userNo}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{userNo}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "Get the post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{postNo}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postNo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comments of post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{postNo}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postNo}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments of a post (passed as query parameter)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments?postId={{postNo}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postNo}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post the post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// if id is greater than 100, the operation is not really completed \r",
									"const response = pm.response.json();\r",
									"pm.test(\"ID should be <= 100\", ()  => {\r",
									"pm.expect(response.id).to.not.gt(100);\r",
									"});\r",
									"\r",
									"//console.log(response); debug \r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(response).to.be.an(\"object\");\r",
									"  pm.expect(response.userId).to.be.a(\"integer\");\r",
									"  pm.expect(response.id).to.be.a(\"number\");\r",
									"  pm.expect(response.title).to.be.a(\"string\");\r",
									"  pm.expect(response.body).to.be.an(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{userNo}},\r\n    \"id\": {{postNo}},\r\n    \"title\": \"foo\",\r\n    \"body\": \"foo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put the post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(response).to.be.an(\"object\");\r",
									"  pm.expect(response.userId).to.be.a(\"integer\");\r",
									" // pm.expect(response.id).to.be.a(\"number\");\r",
									"  pm.expect(response.title).to.be.a(\"string\");\r",
									"  pm.expect(response.body).to.be.an(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\":{{userNo}},\r\n    \"id\":{{postNo}},\r\n    \"title\": \"foo   \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{postNo}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postNo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{postNo}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postNo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch the post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"foo1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{postNo}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postNo}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/todos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all albums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\",  () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/albums",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"albums"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com"
		}
	]
}